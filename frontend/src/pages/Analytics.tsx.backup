import React, { useState } from 'react';
import { 
  TrendingUp, 
  TrendingDown, 
  PieChart, 
  AlertTriangle,
  CheckCircle,
  Clock,
  Download
} from 'lucide-react';
import { analyticsLabels } from '../i18n/analytics';
import AlertTrends from '../components/analytics/AlertTrends';

export default function Analytics() {
  const [timeRange, setTimeRange] = useState('7d');

  // Mock analytics data
  const analyticsData = {
    overview: {
      totalAlerts: 1247,
      alertsChange: 12.5,
      resolvedRate: 89.2,
      resolvedChange: -2.1,
      avgResponseTime: 4.2,
      responseChange: 8.3,
      falsePositiveRate: 6.8,
      fpChange: -15.2
    },
    alertTrends: [
      { date: '2024-01-01', total: 45, critical: 3, high: 12, medium: 20, low: 10 },
      { date: '2024-01-02', total: 52, critical: 5, high: 15, medium: 22, low: 10 },
      { date: '2024-01-03', total: 38, critical: 2, high: 8, medium: 18, low: 10 },
      { date: '2024-01-04', total: 63, critical: 7, high: 18, medium: 25, low: 13 },
      { date: '2024-01-05', total: 41, critical: 3, high: 10, medium: 20, low: 8 },
      { date: '2024-01-06', total: 55, critical: 4, high: 16, medium: 23, low: 12 },
      { date: '2024-01-07', total: 48, critical: 6, high: 14, medium: 18, low: 10 }
    ],
    scenarioBreakdown: [
      { scenario: 'exam_pressure', count: 342, percentage: 27.4, change: 8.2 },
      { scenario: 'isolation_bullying', count: 298, percentage: 23.9, change: -5.1 },
      { scenario: 'self_harm', count: 156, percentage: 12.5, change: 15.7 },
      { scenario: 'teacher_verbal_abuse', count: 203, percentage: 16.3, change: -2.3 },
      { scenario: 'cyber_tracking', count: 248, percentage: 19.9, change: 12.1 }
    ],
    classroomPerformance: [
      { id: '教室-3A', alerts: 89, resolved: 82, avgTime: 3.2, efficiency: 92.1 },
      { id: '教室-4B', alerts: 76, resolved: 70, avgTime: 4.1, efficiency: 92.1 },
      { id: '计算机室-B', alerts: 124, resolved: 98, avgTime: 5.8, efficiency: 79.0 },
      { id: '图书馆-主馆', alerts: 45, resolved: 44, avgTime: 2.1, efficiency: 97.8 }
    ]
  };

  const getScenarioLabel = (scenario: string) => {
    switch (scenario) {
      case 'exam_pressure': return analyticsLabels.examPressure;
      case 'isolation_bullying': return analyticsLabels.isolationBullying;
      case 'self_harm': return analyticsLabels.selfHarm;
      case 'teacher_verbal_abuse': return analyticsLabels.teacherVerbalAbuse;
      case 'cyber_tracking': return analyticsLabels.cyberTracking;
      default: return scenario;
    }
  };

  const getChangeIcon = (change: number) => {
    if (change > 0) return <TrendingUp className="w-4 h-4 text-red-400" />;
    if (change < 0) return <TrendingDown className="w-4 h-4 text-green-400" />;
    return <div className="w-4 h-4" />;
  };

  const getChangeColor = (change: number) => {
    if (change > 0) return 'text-red-400';
    if (change < 0) return 'text-green-400';
    return 'text-slate-400';
  };

  return (
    <div className="grid grid-cols-1 gap-6 lg:gap-8">
      {/* Page Header */}
      <div className="rounded-xl bg-slate-800/60 border border-slate-700 p-6">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div>
            <h1 className="text-2xl font-semibold text-white">
              {analyticsLabels.pageTitle}
              <span className="text-white/60 ml-2 text-lg font-normal">{analyticsLabels.pageSubtitle}</span>
            </h1>
            <p className="text-slate-300 mt-1">
              {analyticsLabels.pageDescription}
            </p>
          </div>
          <div className="flex items-center gap-4">
            <select 
              value={timeRange} 
              onChange={(e) => setTimeRange(e.target.value)}
              className="bg-slate-900 border border-slate-700 rounded-md px-3 py-2 text-sm text-slate-100 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
            >
              <option value="1d">{analyticsLabels.last24Hours}</option>
              <option value="7d">{analyticsLabels.last7Days}</option>
              <option value="30d">{analyticsLabels.last30Days}</option>
              <option value="90d">{analyticsLabels.last90Days}</option>
            </select>
            <button className="inline-flex items-center px-4 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-md text-sm font-medium transition-colors">
              <Download className="w-4 h-4 mr-2" />
              {analyticsLabels.exportReport}
            </button>
          </div>
        </div>
      </div>

      {/* Key Metrics Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="rounded-xl bg-slate-800/60 border border-slate-700 p-6">
          <div className="flex items-center justify-between">
            <div className="min-w-0 flex-1">
              <p className="text-sm font-medium text-slate-100">{analyticsLabels.totalAlerts}</p>
              <p className="text-xs text-slate-400">{analyticsLabels.totalAlertsEn}</p>
              <p className="text-2xl font-bold text-white mt-2">{analyticsData.overview.totalAlerts.toLocaleString()}</p>
            </div>
            <div className="h-12 w-12 bg-blue-900/30 rounded-lg flex items-center justify-center border border-blue-700/50">
              <AlertTriangle className="h-6 w-6 text-blue-400" />
            </div>
          </div>
          <div className="mt-4 flex items-center">
            {getChangeIcon(analyticsData.overview.alertsChange)}
            <span className={`ml-2 text-sm font-medium ${getChangeColor(analyticsData.overview.alertsChange)}`}>
              {Math.abs(analyticsData.overview.alertsChange)}% {analyticsLabels.vsLastPeriod}
            </span>
          </div>
        </div>

        <div className="rounded-xl bg-slate-800/60 border border-slate-700 p-6">
          <div className="flex items-center justify-between">
            <div className="min-w-0 flex-1">
              <p className="text-sm font-medium text-slate-100">{analyticsLabels.resolutionRate}</p>
              <p className="text-xs text-slate-400">{analyticsLabels.resolutionRateEn}</p>
              <p className="text-2xl font-bold text-white mt-2">{analyticsData.overview.resolvedRate}%</p>
            </div>
            <div className="h-12 w-12 bg-green-900/30 rounded-lg flex items-center justify-center border border-green-700/50">
              <CheckCircle className="h-6 w-6 text-green-400" />
            </div>
          </div>
          <div className="mt-4 flex items-center">
            {getChangeIcon(analyticsData.overview.resolvedChange)}
            <span className={`ml-2 text-sm font-medium ${getChangeColor(analyticsData.overview.resolvedChange)}`}>
              {Math.abs(analyticsData.overview.resolvedChange)}% {analyticsLabels.vsLastPeriod}
            </span>
          </div>
        </div>

        <div className="rounded-xl bg-slate-800/60 border border-slate-700 p-6">
          <div className="flex items-center justify-between">
            <div className="min-w-0 flex-1">
              <p className="text-sm font-medium text-slate-100">{analyticsLabels.avgResponseTime}</p>
              <p className="text-xs text-slate-400">{analyticsLabels.avgResponseTimeEn}</p>
              <p className="text-2xl font-bold text-white mt-2">{analyticsData.overview.avgResponseTime}分</p>
            </div>
            <div className="h-12 w-12 bg-yellow-900/30 rounded-lg flex items-center justify-center border border-yellow-700/50">
              <Clock className="h-6 w-6 text-yellow-400" />
            </div>
          </div>
          <div className="mt-4 flex items-center">
            {getChangeIcon(analyticsData.overview.responseChange)}
            <span className={`ml-2 text-sm font-medium ${getChangeColor(analyticsData.overview.responseChange)}`}>
              {Math.abs(analyticsData.overview.responseChange)}% {analyticsLabels.vsLastPeriod}
            </span>
          </div>
        </div>

        <div className="rounded-xl bg-slate-800/60 border border-slate-700 p-6">
          <div className="flex items-center justify-between">
            <div className="min-w-0 flex-1">
              <p className="text-sm font-medium text-slate-100">{analyticsLabels.falsePositiveRate}</p>
              <p className="text-xs text-slate-400">{analyticsLabels.falsePositiveRateEn}</p>
              <p className="text-2xl font-bold text-white mt-2">{analyticsData.overview.falsePositiveRate}%</p>
            </div>
            <div className="h-12 w-12 bg-purple-900/30 rounded-lg flex items-center justify-center border border-purple-700/50">
              <PieChart className="h-6 w-6 text-purple-400" />
            </div>
          </div>
          <div className="mt-4 flex items-center">
            {getChangeIcon(analyticsData.overview.fpChange)}
            <span className={`ml-2 text-sm font-medium ${getChangeColor(analyticsData.overview.fpChange)}`}>
              {Math.abs(analyticsData.overview.fpChange)}% {analyticsLabels.vsLastPeriod}
            </span>
          </div>
        </div>
      </div>

      {/* Alert Trends Chart - Working */}
      <AlertTrends useMockData={true} />

      {/* Scenario Breakdown and Classroom Performance */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Scenario Breakdown */}
        <div className="rounded-xl bg-slate-800/60 border border-slate-700 p-6">
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-white">{analyticsLabels.alertTypesBreakdown}</h3>
            <p className="text-sm text-slate-400">{analyticsLabels.alertTypesBreakdownEn}</p>
          </div>
          <div className="space-y-4">
            {analyticsData.scenarioBreakdown.map((scenario, index) => (
              <div key={index} className="space-y-2">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-slate-100 font-medium">
                    {getScenarioLabel(scenario.scenario)}
                  </span>
                  <div className="flex items-center space-x-2">
                    <span className="text-white font-medium">{scenario.count}</span>
                    <span className={`text-xs ${getChangeColor(scenario.change)}`}>
                      ({scenario.change > 0 ? '+' : ''}{scenario.change}%)
                    </span>
                  </div>
                </div>
                <div className="w-full bg-slate-700/50 rounded-full h-2">
                  <div 
                    className="bg-emerald-500 h-2 rounded-full transition-all duration-300" 
                    style={{ width: `${scenario.percentage}%` }}
                  ></div>
                </div>
                <div className="text-xs text-slate-400">{scenario.percentage}% {analyticsLabels.ofTotalAlerts}</div>
              </div>
            ))}
          </div>
        </div>

        {/* Classroom Performance */}
        <div className="rounded-xl bg-slate-800/60 border border-slate-700 p-6">
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-white">{analyticsLabels.classroomPerformance}</h3>
            <p className="text-sm text-slate-400">{analyticsLabels.classroomPerformanceEn}</p>
          </div>
          <div className="space-y-4">
            {analyticsData.classroomPerformance.map((classroom, index) => (
              <div key={index} className="border border-slate-700 rounded-lg p-4 bg-slate-800/30 hover:bg-slate-800/60 transition-colors">
                <div className="flex items-center justify-between mb-3">
                  <h4 className="font-medium text-white">{classroom.id}</h4>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                    classroom.efficiency >= 95 ? 'bg-green-900/30 text-green-400 border border-green-700/50' :
                    classroom.efficiency >= 85 ? 'bg-yellow-900/30 text-yellow-400 border border-yellow-700/50' :
                    'bg-red-900/30 text-red-400 border border-red-700/50'
                  }`}>
                    {classroom.efficiency}% {analyticsLabels.efficiency}
                  </span>
                </div>
                <div className="grid grid-cols-3 gap-4 text-sm">
                  <div>
                    <p className="text-slate-400">{analyticsLabels.totalAlertsCount}</p>
                    <p className="font-semibold text-white">{classroom.alerts}</p>
                  </div>
                  <div>
                    <p className="text-slate-400">{analyticsLabels.resolved}</p>
                    <p className="font-semibold text-white">{classroom.resolved}</p>
                  </div>
                  <div>
                    <p className="text-slate-400">{analyticsLabels.avgTime}</p>
                    <p className="font-semibold text-white">{classroom.avgTime}分</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}